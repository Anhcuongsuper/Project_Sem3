@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .cloudinary-thumbnails img {
        width: 300%;
    }
</style>
@model HTM.Mgs.Models.SanPham
@using HTM.Mgs.HtmlExtension
<div class="pcoded-inner-content">
    <div id="formSanPham">
        @using (Html.BeginForm("Form", "SanPham", FormMethod.Post, new { @class = "productForm" }))
        {

            <div class="row">
                <div class="col-sm-6">
                    <!-- text input -->
                    <div class="form-group">
                        @Html.Label("Tên sản phẩm:", new { @class = "control-label" })
                        <span class="required"> (*)</span>
                        @Html.TextBox("TenSanPham", null, new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Label("Mã Sản Phẩm:", new { @class = "control-label" })
                        <span class="required"> (*)</span>
                        @Html.TextBox("MaSanPham", null, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <!-- text input -->
                    <div class="form-group">
                        @Html.Label("Tiêu đề", new { @class = "control-label" })
                        <span class="required"> (*)</span>
                        @Html.TextBox("TieuDe", null, new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.Label("Thể loại:", new { @class = "control-label" })
                        <span class="required"> (*)</span>
                        <div id="ddlTheLoai">

                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <!-- text input -->
                    <div class="form-group">
                        @Html.Label("Giá", new { @class = "control-label" })
                        <span class="required"> (*)</span>
                        @Html.TextBox("Gia", null, new { @class = "form-control" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="form-group">
                            @Html.Label("Số lượng", new { @class = "control-label" })
                            <span class="required"> (*)</span>
                            @Html.TextBox("SoLuong", null, new { type = "number", min = "1", max = "10", step = "1" })
                            @*<input type="number" name="SoLuong" value="SoLuong"  min="1" max="10" step="1" />*@
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <!-- text input -->
                    <div class="form-group">
                        @Html.Label("Mô tả", new { @class = "control-label" })
                        @Html.TextArea("MoTa", null, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <!-- text input -->
                    <div class="form-group">
                        @Html.Label("Chi tiết", new { @class = "control-label" })
                        @Html.TextArea("ChiTiet", null, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-sm-12">
                <!-- textarea -->
                <div class="form-group uploaded">
                    <button type="button" id="upload_widget" class="btn btn-primary">Tải ảnh</button>
                </div>
            </div>
            <div class="col-sm-12">
                @Html.Button("Ghi lại", "btn btn-success", "btnGhiLai", "fa fa-floppy-o")
            </div>

        }

    </div>
</div>
@section scripts{
    <script>
    $(document).ready(function () {
        $("#btnGhiLai").click(function () {
            $("#formSanPham form").submit();
        });
        $("input[type='number']").inputSpinner()
    })

    function ListDanhMucTheLoai(TheloaiId) {
        $.ajax({
            url: '/SanPham/_LoadDanhSachTheoLoai',
            data: {
                TheloaiId: TheloaiId
            },
            type: "POST",
            dataType: "html",
            success: function (data) {
                $("#ddlTheLoai").html(data);
            },
            complete: function (data) {
            }
        });
    }
    ListDanhMucTheLoai('@Model.TheLoaiId');
    </script>

    <script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"></script>
    <script type="text/javascript">
        function showUploadWidget() {
            cloudinary.openUploadWidget({
                cloudName: "dlponemj5",
                uploadPreset: "i6qdjmfe",
                sources: [
                    "local",
                    "url",
                    "camera"

                ],
                form: ".productForm",
                fieldName: "thumbnails[]",
                thumbnails: '.uploaded',

                showAdvancedOptions: true,
                cropping: true,
                multiple: false,
                defaultSource: "local",
                styles: {
                    palette: {
                        window: "#FFFFFF",
                        windowBorder: "#90A0B3",
                        tabIcon: "#0078FF",
                        menuIcons: "#5A616A",
                        textDark: "#000000",
                        textLight: "#FFFFFF",
                        link: "#0078FF",
                        action: "#FF620C",
                        inactiveTabIcon: "#0E2F5A",
                        error: "#F44235",
                        inProgress: "#0078FF",
                        complete: "#20B832",
                        sourceBg: "#E4EBF1"
                    },
                    fonts: {
                        default: {
                            active: true
                        }
                    }
                }
            },
                (err, info) => {
                    if (!err) {
                        console.log("Upload Widget event - ", info);
                    }
                });
        }
        $('body').on('click', '.cloudinary-delete', function () {
            var splittedLink = $(this).prev().attr('src').split('/');
            var imageId = splittedLink[splittedLink.length - 1].split('.')[0];
            $(`input[data-cloudinary-public-id="${imageId}"]`).remove();
        });
        document.getElementById("upload_widget").addEventListener("click", function () {
            showUploadWidget();
        }, false);
        $("input[type='currency']").on({
            keyup: function () {
                formatCurrency($(this));
            },
            blur: function () {
                formatCurrency($(this), "blur");
            }
        });


        function formatNumber(n) {
            // format number 1000000 to 1,234,567
            return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        }


        function formatCurrency(input, blur) {
            // appends $ to value, validates decimal side
            // and puts cursor back in right position.

            // get input value
            var input_val = input.val();

            // don't validate empty input
            if (input_val === "") { return; }

            // original length
            var original_len = input_val.length;

            // initial caret position
            var caret_pos = input.prop("selectionStart");

            // check for decimal
            if (input_val.indexOf(".") >= 0) {

                // get position of first decimal
                // this prevents multiple decimals from
                // being entered
                var decimal_pos = input_val.indexOf(".");

                // split number by decimal point
                var left_side = input_val.substring(0, decimal_pos);
                var right_side = input_val.substring(decimal_pos);

                // add commas to left side of number
                left_side = formatNumber(left_side);

                // validate right side
                right_side = formatNumber(right_side);

                // On blur make sure 2 numbers after decimal
                if (blur === "blur") {
                    right_side += "";
                }

                // Limit decimal to only 2 digits
                right_side = right_side.substring(0, 2);

                // join number by .
                input_val = left_side + "." + right_side;

            } else {
                // no decimal entered
                // add commas to number
                // remove all non-digits
                input_val = formatNumber(input_val);
                input_val = input_val + " Đ";

                // final formatting
                if (blur === "blur") {
                    input_val += "";
                }
            }

            // send updated string to input
            input.val(input_val);

            // put caret back in the right position
            var updated_len = input_val.length;
            caret_pos = updated_len - original_len + caret_pos;
            input[0].setSelectionRange(caret_pos, caret_pos);
        }
    </script>
}

